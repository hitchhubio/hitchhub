{"version":3,"sources":["../src/token-builder.ts","../src/formatters/css-variable-consts.ts","../src/formatters/typescript-consts.ts","../src/formatters/css-variable-object.ts","../src/formatters/minify-dictionary.ts","../src/formatters/dtcg.ts","../src/formatters/typescript.ts"],"sourcesContent":["import camelCase from 'camelcase';\nimport StyleDictionary, { PlatformConfig, Token } from 'style-dictionary';\nimport { Config } from 'style-dictionary/types';\nimport { cssVariableConstsFormatter } from './formatters/css-variable-consts.js';\nimport { cssVariableObjectFormatter } from './formatters/css-variable-object.js';\nimport { dtcgFormatter } from './formatters/dtcg.js';\nimport { typeScriptConstsFormatter } from './formatters/typescript-consts.js';\nimport { typeScriptFormatter } from './formatters/typescript.js';\n\nexport type TokenBuilderPlatformConfig = {\n  css?: {\n    prefix?: string;\n    selector: string;\n    outputFolder: string;\n    outputFilename: string;\n  };\n  cssVariableObject?: {\n    prefix?: string;\n    exportName: string;\n    exportType?: string;\n    outputFolder: string;\n    outputFilename: string;\n  };\n  cssVariableConsts?: {\n    prefix?: string;\n    camelCase?: boolean;\n    outputFolder: string;\n    outputFilename: string;\n  };\n  typeScript?: {\n    header?: string;\n    exportName: string;\n    exportType?: string;\n    outputFolder: string;\n    outputFilename: string;\n    outputReferences: boolean;\n  };\n  typeScriptConsts?: {\n    prefix?: string;\n    camelCase?: boolean;\n    outputFolder: string;\n    outputFilename: string;\n  };\n  dtcg?: {\n    outputFolder: string;\n    outputFilename: string;\n  };\n  figma?: {\n    outputFolder: string;\n    outputFilename: string;\n  };\n};\n\nexport type TokenBuilderOptions = {\n  source?: string[];\n  tokens?: any;\n  platforms: TokenBuilderPlatformConfig;\n};\n\nfunction ensureTrailingSlash(path: string) {\n  if (!path) {\n    return path;\n  }\n\n  return path.endsWith('/') ? path : `${path}/`;\n}\n\nfunction createPlatforms(platformConfig: TokenBuilderPlatformConfig) {\n  const platforms: Record<string, PlatformConfig> = {};\n\n  if (platformConfig.css) {\n    platforms['css'] = {\n      transformGroup: 'css/custom',\n      buildPath: ensureTrailingSlash(platformConfig.css.outputFolder),\n      prefix: platformConfig.css.prefix,\n      files: [\n        {\n          format: 'css/variables',\n          destination: platformConfig.css.outputFilename,\n        },\n      ],\n      options: {\n        showFileHeader: false,\n        selector: platformConfig.css.selector,\n        outputReferences: true,\n      },\n    };\n  }\n\n  if (platformConfig.cssVariableObject) {\n    platforms['cssVariableObject'] = {\n      transformGroup: 'css/custom',\n      buildPath: ensureTrailingSlash(\n        platformConfig.cssVariableObject.outputFolder,\n      ),\n      prefix: platformConfig.cssVariableObject.prefix,\n      files: [\n        {\n          format: 'css/variable-object',\n          destination: platformConfig.cssVariableObject.outputFilename,\n        },\n      ],\n      options: {\n        fileHeader: 'auto-generated',\n        exportName: platformConfig.cssVariableObject.exportName,\n        exportType: platformConfig.cssVariableObject.exportType,\n      },\n    };\n  }\n\n  if (platformConfig.cssVariableConsts) {\n    platforms['cssVariableConsts'] = {\n      transformGroup: 'css/custom',\n      buildPath: ensureTrailingSlash(\n        platformConfig.cssVariableConsts.outputFolder,\n      ),\n      prefix: platformConfig.cssVariableConsts.prefix,\n      files: [\n        {\n          format: 'css/variable-consts',\n          destination: platformConfig.cssVariableConsts.outputFilename,\n        },\n      ],\n      options: {\n        fileHeader: 'auto-generated',\n        camelCase: platformConfig.cssVariableConsts.camelCase,\n      },\n    };\n  }\n\n  if (platformConfig.typeScript) {\n    platforms['typeScript'] = {\n      transformGroup: 'js',\n      buildPath: ensureTrailingSlash(platformConfig.typeScript.outputFolder),\n      files: [\n        {\n          format: 'typeScript/object',\n          destination: platformConfig.typeScript.outputFilename,\n        },\n      ],\n      options: {\n        fileHeader: 'auto-generated',\n        outputReferences: platformConfig.typeScript.outputReferences,\n        header: platformConfig.typeScript.header,\n        exportName: platformConfig.typeScript.exportName,\n        exportType: platformConfig.typeScript.exportType,\n      },\n    };\n  }\n\n  if (platformConfig.typeScriptConsts) {\n    platforms['typeScriptConsts'] = {\n      transformGroup: 'typeScript/consts',\n      buildPath: ensureTrailingSlash(\n        platformConfig.typeScriptConsts.outputFolder,\n      ),\n      prefix: platformConfig.typeScriptConsts.prefix,\n      files: [\n        {\n          format: 'typeScript/consts',\n          destination: platformConfig.typeScriptConsts.outputFilename,\n        },\n      ],\n      options: {\n        fileHeader: 'auto-generated',\n        camelCase: platformConfig.typeScriptConsts.camelCase,\n      },\n    };\n  }\n\n  if (platformConfig.dtcg) {\n    platforms['dtcg'] = {\n      transformGroup: 'js',\n      buildPath: ensureTrailingSlash(platformConfig.dtcg.outputFolder),\n      files: [\n        {\n          format: 'dtcg',\n          destination: platformConfig.dtcg.outputFilename,\n        },\n      ],\n      options: {\n        outputReferences: true,\n      },\n    };\n  }\n\n  if (platformConfig.figma) {\n    platforms['figma'] = {\n      transformGroup: 'figma',\n      buildPath: ensureTrailingSlash(platformConfig.figma.outputFolder),\n      files: [\n        {\n          format: 'figma',\n          destination: platformConfig.figma.outputFilename,\n        },\n      ],\n      options: {\n        outputReferences: true,\n      },\n    };\n  }\n\n  return platforms;\n}\n\nfunction createRemoveTierTransformer({\n  format,\n}: {\n  format: 'kebab' | 'pascal';\n}) {\n  return function (token: Token) {\n    if (!token.name) {\n      throw new Error(`Token has no name.`);\n    }\n\n    if (!token.attributes?.category) {\n      throw new Error(`Token ${token.name} has no category.`);\n    }\n\n    const category = token.attributes?.category as string;\n\n    if (!['primitive', 'semantic', 'component'].includes(category)) {\n      throw new Error(\n        `Token ${token.name} has an invalid category '${category}'.`,\n      );\n    }\n\n    if (format === 'pascal') {\n      return token.name.replace(camelCase(category, { pascalCase: true }), '');\n    }\n\n    return token.name.replace(`-${category}-`, '-');\n  };\n}\n\nasync function build({ source, tokens, platforms }: TokenBuilderOptions) {\n  const config: Config = {\n    source,\n    tokens,\n    platforms: createPlatforms(platforms),\n  };\n\n  const styleDictionary = new StyleDictionary(config, { verbosity: 'verbose' });\n\n  styleDictionary.registerFileHeader({\n    name: 'auto-generated',\n    fileHeader() {\n      return ['This file was auto-generated.'];\n    },\n  });\n\n  // Remove 'primitive', 'semantic', or 'component' tier name from the token name\n  styleDictionary.registerTransform({\n    name: 'name/remove-tier-kebab',\n    type: 'name',\n    filter() {\n      return true;\n    },\n    transform: createRemoveTierTransformer({ format: 'kebab' }),\n  });\n\n  styleDictionary.registerTransform({\n    name: 'name/remove-tier-pascal',\n    type: 'name',\n    filter() {\n      return true;\n    },\n    transform: createRemoveTierTransformer({ format: 'pascal' }),\n  });\n\n  styleDictionary.registerTransform({\n    name: 'lineHeight/percentage',\n    type: 'value',\n    filter(token) {\n      return token.attributes?.item === 'lineHeight';\n    },\n    transform(token) {\n      const percent = Math.round(token.$value * 100);\n      return `${percent}%`;\n    },\n  });\n\n  styleDictionary.registerTransform({\n    name: 'letterSpacing/em',\n    type: 'value',\n    filter(token) {\n      return token.attributes?.item === 'letterSpacing';\n    },\n    transform(token) {\n      const parsed = Number(token.$value.replace('rem', ''));\n      return `${parsed}em`;\n    },\n  });\n\n  styleDictionary.registerTransform({\n    name: 'letterSpacing/percentage',\n    type: 'value',\n    filter(token) {\n      return token.attributes?.item === 'letterSpacing';\n    },\n    transform(token) {\n      const parsed = Number(token.$value.replace('rem', ''));\n      return `${parsed * 100}%`;\n    },\n  });\n\n  styleDictionary.registerTransform({\n    name: 'fontSize/px',\n    type: 'value',\n    filter: (token) =>\n      token.attributes?.type === 'font' && token.attributes?.item === 'size',\n    transform: (token) => {\n      const parsed = Number(token.$value.replace('rem', ''));\n      return `${parsed * 16}px`;\n    },\n  });\n\n  styleDictionary.registerTransformGroup({\n    name: 'css/custom',\n    transforms: [\n      'attribute/cti',\n      'name/kebab',\n      'fontFamily/css',\n      'typography/css/shorthand',\n      'shadow/css/shorthand',\n      'name/remove-tier-kebab',\n      'letterSpacing/em',\n    ],\n  });\n\n  styleDictionary.registerTransformGroup({\n    name: 'typeScript/consts',\n    transforms: ['attribute/cti', 'name/pascal', 'name/remove-tier-pascal'],\n  });\n\n  styleDictionary.registerTransformGroup({\n    name: 'figma',\n    transforms: [\n      'attribute/cti',\n      'name/pascal',\n      'size/rem',\n      'lineHeight/percentage',\n      'color/hex',\n      'fontFamily/css',\n      'shadow/css/shorthand',\n      'letterSpacing/percentage',\n      'fontSize/px',\n    ],\n  });\n\n  styleDictionary.registerFormat({\n    name: 'dtcg',\n    format: dtcgFormatter,\n  });\n\n  styleDictionary.registerFormat({\n    name: 'typeScript/object',\n    format: typeScriptFormatter,\n  });\n\n  styleDictionary.registerFormat({\n    name: 'typeScript/consts',\n    format: typeScriptConstsFormatter,\n  });\n\n  styleDictionary.registerFormat({\n    name: 'css/variable-object',\n    format: cssVariableObjectFormatter,\n  });\n\n  styleDictionary.registerFormat({\n    name: 'css/variable-consts',\n    format: cssVariableConstsFormatter,\n  });\n\n  await styleDictionary.buildAllPlatforms();\n}\n\nexport async function buildTokens({\n  source = [],\n  tokens = {},\n  platforms,\n}: TokenBuilderOptions) {\n  await build({ source, tokens, platforms });\n}\n","import { FormatFnArguments } from 'style-dictionary/types';\nimport { createPropertyFormatter, fileHeader } from 'style-dictionary/utils';\nimport { getTokens } from './typescript-consts.js';\n\nexport async function cssVariableConstsFormatter({\n  dictionary,\n  platform,\n  options,\n  file,\n}: FormatFnArguments) {\n  const header = await fileHeader({ file });\n\n  const formatter = createPropertyFormatter({\n    outputReferences: true,\n    outputReferenceFallbacks: false,\n    dictionary,\n    format: 'css',\n    formatting: {},\n    themeable: false,\n    usesDtcg: true,\n  });\n\n  const cssVariables = dictionary.allTokens.map((token) => formatter(token));\n\n  const tokens = getTokens({ tokens: dictionary.allTokens, camelCase: true });\n\n  const variableNames = cssVariables.map(\n    (variable) =>\n      `var(${variable.slice(0, Math.max(0, variable.indexOf(':'))).trim()})`,\n  );\n\n  if (tokens.length !== variableNames.length) {\n    throw new Error(\n      `Number of tokens (${tokens.length}) does not match number of variable names (${variableNames.length}).`,\n    );\n  }\n\n  const consts = tokens.map(\n    (token, index) => `export const ${token.name} = '${variableNames[index]}';`,\n  );\n\n  const lines = [header, ...consts, ''];\n\n  return lines.join('\\n');\n}\n","import camelCase from 'camelcase';\nimport { Token } from 'style-dictionary';\nimport { FormatFnArguments, TransformedToken } from 'style-dictionary/types';\nimport { fileHeader } from 'style-dictionary/utils';\n\nexport function getTokens({\n  tokens,\n  camelCase: camelCaseOption,\n}: {\n  tokens: TransformedToken[];\n  camelCase: boolean;\n}) {\n  return tokens.map((token: Token) => {\n    if (!token.name) {\n      throw new Error(`Token has no name.`);\n    }\n\n    const tokenName = camelCaseOption\n      ? camelCase(token.name)\n      : camelCase(token.name, { pascalCase: true });\n\n    return {\n      name: tokenName,\n      value: token.$value,\n    };\n  });\n}\n\nexport async function typeScriptConstsFormatter({\n  dictionary,\n  platform,\n  options,\n  file,\n}: FormatFnArguments) {\n  const header = await fileHeader({ file });\n\n  const consts = getTokens({\n    tokens: dictionary.allTokens,\n    camelCase: options.camelCase ?? false,\n  }).map(\n    (token) => `export const ${token.name} = ${JSON.stringify(token.value)};`,\n  );\n\n  const lines = [header, ...consts, ''];\n\n  return lines.join('\\n');\n}\n","import cloneDeepWith from 'lodash/cloneDeepWith.js';\nimport { TransformedToken } from 'style-dictionary';\nimport { FormatFnArguments } from 'style-dictionary/types';\nimport { createPropertyFormatter, fileHeader } from 'style-dictionary/utils';\n\nfunction isTransformedToken(value: unknown): value is TransformedToken {\n  return (\n    value != null &&\n    Object.prototype.hasOwnProperty.call(value, 'name') &&\n    Object.prototype.hasOwnProperty.call(value, 'original')\n  );\n}\n\nexport async function cssVariableObjectFormatter({\n  dictionary,\n  platform,\n  options,\n  file,\n}: FormatFnArguments) {\n  if (!options.exportName) {\n    throw new Error('Missing exportName option.');\n  }\n\n  const formatter = createPropertyFormatter({\n    outputReferences: true,\n    outputReferenceFallbacks: false,\n    dictionary,\n    format: 'css',\n    formatting: {},\n    themeable: false,\n    usesDtcg: true,\n  });\n\n  const cssVariablesObject = cloneDeepWith(dictionary.tokens, (value) => {\n    if (isTransformedToken(value)) {\n      const cssVariable = formatter(value);\n      return `var(${cssVariable.slice(0, Math.max(0, cssVariable.indexOf(':'))).trim()})`;\n    }\n\n    return;\n  });\n\n  const cssVariablesObjectString = JSON.stringify(cssVariablesObject, null, 2);\n\n  const header = await fileHeader({ file });\n\n  const lines = [\n    header,\n    ...(options.header ? [options.header] : []),\n    '',\n    options.exportType\n      ? `export const ${options.exportName}: ${options.exportType} = ${cssVariablesObjectString};`\n      : `export const ${options.exportName} = ${cssVariablesObjectString};`,\n    '',\n  ];\n\n  return lines.join('\\n');\n}\n","import { Token } from 'style-dictionary';\nimport { OutputReferences } from 'style-dictionary/types';\nimport { usesReferences } from 'style-dictionary/utils';\n\n// Adapted from https://github.com/amzn/style-dictionary/blob/main/lib/common/formatHelpers/minifyDictionary.js\nexport function minifyDictionary({\n  tokens,\n  outputReferences,\n}: {\n  tokens: Record<string, Token>;\n  outputReferences?: OutputReferences;\n}) {\n  if (outputReferences && typeof outputReferences !== 'boolean') {\n    throw new Error('outputReferences must be a boolean.');\n  }\n\n  if (typeof tokens !== 'object' || Array.isArray(tokens)) {\n    return tokens;\n  }\n\n  const result: Record<string, unknown> = {};\n\n  if (Object.prototype.hasOwnProperty.call(tokens, 'original')) {\n    if (outputReferences && usesReferences(tokens.original.$value)) {\n      return {\n        $type: tokens.original.$type,\n        $value: tokens.original.$value,\n      };\n    }\n\n    return {\n      $type: tokens.$type,\n      $value: tokens.$value,\n    };\n  }\n\n  for (const name in tokens) {\n    if (Object.prototype.hasOwnProperty.call(tokens, name)) {\n      result[name] = minifyDictionary({\n        tokens: tokens[name],\n        outputReferences,\n      });\n    }\n  }\n\n  return result;\n}\n","import { FormatFnArguments } from 'style-dictionary/types';\nimport { minifyDictionary } from './minify-dictionary.js';\n\nexport async function dtcgFormatter({\n  dictionary,\n  platform,\n  options,\n  file,\n}: FormatFnArguments) {\n  const tokens = minifyDictionary({\n    tokens: dictionary.tokens,\n    outputReferences: options.outputReferences,\n  });\n\n  return `${JSON.stringify(tokens, null, 2)}`;\n}\n","import { FormatFnArguments } from 'style-dictionary/types';\nimport { fileHeader } from 'style-dictionary/utils';\nimport { minifyDictionary } from './minify-dictionary.js';\n\nexport async function typeScriptFormatter({\n  dictionary,\n  platform,\n  options,\n  file,\n}: FormatFnArguments) {\n  if (!options.exportName) {\n    throw new Error('Missing exportName option.');\n  }\n\n  const tokens = minifyDictionary({\n    tokens: dictionary.tokens,\n    outputReferences: options.outputReferences,\n  });\n\n  const tokensString = JSON.stringify(tokens, null, 2);\n\n  const header = await fileHeader({ file });\n\n  const lines = [\n    header,\n    ...(options.header ? [options.header] : []),\n    '',\n    options.exportType\n      ? `export const ${options.exportName}: ${options.exportType} = ${tokensString};`\n      : `export const ${options.exportName} = ${tokensString};`,\n    '',\n  ];\n\n  return lines.join('\\n');\n}\n"],"mappings":"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","names":["camelCase","StyleDictionary","createPropertyFormatter","fileHeader","camelCase","fileHeader","getTokens","tokens","camelCaseOption","token","typeScriptConstsFormatter","dictionary","platform","options","file","header","consts","cssVariableConstsFormatter","dictionary","platform","options","file","header","fileHeader","formatter","createPropertyFormatter","cssVariables","token","tokens","getTokens","variableNames","variable","consts","index","cloneDeepWith","createPropertyFormatter","fileHeader","isTransformedToken","value","cssVariableObjectFormatter","dictionary","platform","options","file","formatter","cssVariablesObject","cssVariable","cssVariablesObjectString","usesReferences","minifyDictionary","tokens","outputReferences","result","name","dtcgFormatter","dictionary","platform","options","file","tokens","minifyDictionary","fileHeader","typeScriptFormatter","dictionary","platform","options","file","tokens","minifyDictionary","tokensString","fileHeader","ensureTrailingSlash","path","createPlatforms","platformConfig","platforms","createRemoveTierTransformer","format","token","category","camelCase","build","source","tokens","config","styleDictionary","StyleDictionary","dtcgFormatter","typeScriptFormatter","typeScriptConstsFormatter","cssVariableObjectFormatter","cssVariableConstsFormatter","buildTokens"]}